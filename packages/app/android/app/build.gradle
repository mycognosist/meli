plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace "com.p2panda.meli"

    // Set to minimum version 33 for `geolocator` package
    compileSdkVersion Math.max(flutter.compileSdkVersion, 33)

    // Pin NDK version to assure compatibility with cargo-ndk build (see
    // "packages/p2panda/native/build.rs" file for details)
    ndkVersion "25.2.9519653"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.p2panda.meli"
        minSdkVersion 23
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        manifestPlaceholders = [applicationLabel: "Meli"]
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            debuggable true
            manifestPlaceholders = [applicationLabel: "Meli (Debug)"]
        }
        profile {
            applicationIdSuffix ".profile"
            debuggable true
            manifestPlaceholders = [applicationLabel: "Meli (Profile)"]
        }
        release {
            // We do not intend to upload the .apk to any "App Store" and just
            // sign with the debug keys
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions "appType"

    productFlavors {
        normal {
            dimension "appType"
        }
        qa {
            dimension "appType"
            applicationIdSuffix ".qa"
            manifestPlaceholders = [applicationLabel: "Meli (QA)"]
        }
    }

    variantFilter { variant ->
        // Skip qa flavor for debug and profile builds
        def names = variant.flavors*.name
        if (
          names.contains('qa') &&
          (
            variant.buildType.name == "debug" ||
            variant.buildType.name == "profile"
          )
        ) {
            setIgnore(true)
        }
    }
}

flutter {
    source '../..'
}

dependencies {}
